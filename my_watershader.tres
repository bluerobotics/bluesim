[gd_resource type="VisualShader" load_steps=49 format=2]

[ext_resource path="res://scenery/Ground034_2K_Normal.jpg" type="Texture" id=1]
[ext_resource path="res://scenery/Ground034_2K_Color.jpg" type="Texture" id=2]
[ext_resource path="res://scenery/Ground034_2K_Roughness.jpg" type="Texture" id=3]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 5

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 1 )
texture_type = 2

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=5]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 1, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorFunc" id=8]

[sub_resource type="VisualShaderNodeVectorOp" id=9]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 1, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeDotProduct" id=10]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 1, 0 ) ]

[sub_resource type="VisualShaderNodeScalarClamp" id=11]

[sub_resource type="VisualShaderNodeColorConstant" id=12]
constant = Color( 0.587891, 0.54932, 0.386377, 1 )

[sub_resource type="VisualShaderNodeTransformVecMult" id=13]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "normal"

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeVectorOp" id=17]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=18]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 1, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=19]
output_port_for_preview = 0
size = Vector2( 782, 650 )
expression = "vec3 coord = c * 10.0;
vec2 i = floor(coord.xy);
vec2 f = fract(coord.xy);

float min_dist = 99999.0;
// going through the current tile and the tiles surrounding it
for(float x = -1.0; x <= 1.0; x++) {
	for(float y = -1.0; y <= 1.0; y++) {
		
		// generate a random point in each tile,
		// but also account for whether it's a farther, neighbouring tile
		vec2 randseed = i + vec2(x, y);
		vec2 rand = fract(sin( vec2( dot(randseed.xy,vec2(1237.41,311.7)), dot(randseed,vec2(269.5,183.3)) ) ) * 437.5453 * (0.001+sin(TIME*2.0)*0.0005));
		vec2 node = rand + vec2(x, y);
		
		// check for distance to the point in that tile
		// decide whether it's the minimum
		float dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);
		min_dist = min(min_dist, dist);
	}
}
output = vec3(min_dist)"

[sub_resource type="VisualShaderNodeInput" id=20]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=21]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 5

[sub_resource type="VisualShaderNodeExpression" id=22]
output_port_for_preview = 0
size = Vector2( 975, 670 )
expression = "// from https://www.shadertoy.com/view/MdlXz8
float time = TIME * .5+23.0;
// uv should be the 0-1 uv of texture...
vec2 uv = map.xy;
vec2 p = mod(uv*6.28318530718, 6.28318530718)-250.0;

vec2 i = vec2(p);
float c = 1.0;
float inten = .005;

for (int n = 0; n < 4; n++) 
{
	float t = time * (1.0 - (3.5 / float(n+1)));
	i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
	c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
}
c /= float(4);
c = 1.17-pow(c, 1.4);
vec3 colour = vec3(pow(abs(c), 8.0));
colour = clamp(colour + vec3(0.15, 0.15, 0), 0.0, 1.0);

fragColor = vec3(colour);
"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "transmission"

[sub_resource type="VisualShaderNodeVectorOp" id=24]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "albedo"

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeVectorOp" id=27]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeDotProduct" id=29]

[sub_resource type="VisualShaderNodeInput" id=30]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=31]

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "diffuse"

[sub_resource type="VisualShaderNodeInput" id=33]
input_name = "albedo"

[sub_resource type="VisualShaderNodeInput" id=34]
input_name = "attenuation"

[sub_resource type="VisualShaderNodeVectorOp" id=35]
operator = 2

[sub_resource type="VisualShaderNodeDotProduct" id=36]

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=38]
input_name = "light_color"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=39]

[sub_resource type="VisualShaderNodeVectorOp" id=40]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=41]
uniform_name = "mix"

[sub_resource type="VisualShaderNodeVectorClamp" id=42]

[sub_resource type="VisualShaderNodeInput" id=43]
input_name = "light_color"

[sub_resource type="VisualShaderNodeInput" id=44]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeTransformMult" id=45]

[resource]
code = "shader_type spatial;
render_mode cull_disabled;

uniform sampler2D tex_frg_11 : hint_albedo;
uniform sampler2D tex_frg_13 : hint_albedo;
uniform float Intensity;
uniform float mix;



void vertex() {
// Output:0

}

void fragment() {
// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, UV.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// Scalar:14
	float n_out14p0 = 0.000000;

// Texture:13
	vec4 tex_frg_13_read = texture(tex_frg_13, UV.xy);
	vec3 n_out13p0 = tex_frg_13_read.rgb;
	float n_out13p1 = tex_frg_13_read.a;

// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// Expression:6
	vec3 n_out6p0;
	n_out6p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 coord = n_out7p0 * 10.0;
		vec2 i = floor(coord.xy);
		vec2 f = fract(coord.xy);
		
		float min_dist = 99999.0;
		// going through the current tile and the tiles surrounding it
		for(float x = -1.0; x <= 1.0; x++) {
			for(float y = -1.0; y <= 1.0; y++) {
				
				// generate a random point in each tile,
				// but also account for whether it's a farther, neighbouring tile
				vec2 randseed = i + vec2(x, y);
				vec2 rand = fract(sin( vec2( dot(randseed.xy,vec2(1237.41,311.7)), dot(randseed,vec2(269.5,183.3)) ) ) * 437.5453 * (0.001+sin(TIME*2.0)*0.0005));
				vec2 node = rand + vec2(x, y);
				
				// check for distance to the point in that tile
				// decide whether it's the minimum
				float dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);
				min_dist = min(min_dist, dist);
			}
		}
		n_out6p0 = vec3(min_dist)
	}

// VectorOp:8
	vec3 n_in8p1 = vec3(3.00000, 3.00000, 3.00000);
	vec3 n_out8p0 = pow(n_out6p0, n_in8p1);

// Color:3
	vec3 n_out3p0 = vec3(0.587891, 0.549320, 0.386377);
	float n_out3p1 = 1.000000;

// VectorOp:4
	vec3 n_out4p0 = n_out8p0 * n_out3p0;

// Input:36
	mat4 n_out36p0 = INV_CAMERA_MATRIX;

// Input:37
	vec3 n_out37p0 = NORMAL;

// TransformVectorMult:35
	vec3 n_out35p0 = (vec4(n_out37p0, 1.0) * n_out36p0).xyz;

// DotProduct:24
	vec3 n_in24p1 = vec3(0.00000, 1.00000, 0.00000);
	float n_out24p0 = dot(n_out35p0, n_in24p1);

// ScalarClamp:26
	float n_in26p1 = 0.00000;
	float n_in26p2 = 1.00000;
	float n_out26p0 = clamp(n_out24p0, n_in26p1, n_in26p2);

// ScalarUniform:39
	float n_out39p0 = Intensity;

// VectorOp:40
	vec3 n_out40p0 = vec3(n_out26p0) * vec3(n_out39p0);

// VectorOp:21
	vec3 n_out21p0 = n_out4p0 * n_out40p0;

// ColorFunc:22
	vec3 n_out22p0;
	{
		vec3 c = n_out21p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out22p0 = vec3(max3, max3, max3);
	}

// VectorOp:23
	vec3 n_in23p1 = vec3(3.00000, 3.00000, 3.00000);
	vec3 n_out23p0 = n_out22p0 * n_in23p1;

// Output:0
	ALBEDO = n_out11p0;
	METALLIC = n_out14p0;
	ROUGHNESS = dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333));
	TRANSMISSION = n_out23p0;

}

void light() {
// Input:28
	vec3 n_out28p0 = ALBEDO;

// Input:29
	vec3 n_out29p0 = ATTENUATION;

// VectorOp:30
	vec3 n_out30p0 = n_out28p0 * n_out29p0;

// Input:33
	vec3 n_out33p0 = NORMAL;

// Input:15
	vec3 n_out15p0 = TRANSMISSION;

// Input:48
	vec3 n_out48p0 = LIGHT_COLOR;

// VectorOp:24
	vec3 n_out24p0 = n_out15p0 * n_out48p0;

// DotProduct:32
	float n_out32p0 = dot(n_out33p0, n_out24p0);

// VectorOp:31
	vec3 n_out31p0 = n_out30p0 * vec3(n_out32p0);

// Input:37
	vec3 n_out37p0 = ALBEDO;

// Input:38
	vec3 n_out38p0 = ATTENUATION;

// VectorOp:39
	vec3 n_out39p0 = n_out37p0 * n_out38p0;

// Input:41
	vec3 n_out41p0 = NORMAL;

// Input:43
	vec3 n_out43p0 = LIGHT_COLOR;

// DotProduct:40
	float n_out40p0 = dot(n_out41p0, n_out43p0);

// VectorOp:45
	vec3 n_out45p0 = n_out39p0 * vec3(n_out40p0);

// ScalarUniform:46
	float n_out46p0 = mix;

// VectorScalarMix:44
	vec3 n_out44p0 = mix(n_out31p0, n_out45p0, n_out46p0);

// Input:36
	vec3 n_out36p0 = DIFFUSE_LIGHT;

// VectorOp:35
	vec3 n_out35p0 = n_out44p0 + n_out36p0;

// VectorClamp:47
	vec3 n_in47p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in47p2 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out47p0 = clamp(n_out35p0, n_in47p1, n_in47p2);

// Output:0
	DIFFUSE_LIGHT = n_out47p0;

}
"
graph_offset = Vector2( 211, -185.25 )
modes/cull = 2
nodes/vertex/2/node = SubResource( 44 )
nodes/vertex/2/position = Vector2( -1443, -323 )
nodes/vertex/3/node = SubResource( 45 )
nodes/vertex/3/position = Vector2( -1167, -287 )
nodes/fragment/0/position = Vector2( -1088, 48 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -1616, -192 )
nodes/fragment/4/node = SubResource( 17 )
nodes/fragment/4/position = Vector2( -1400, -240 )
nodes/fragment/6/node = SubResource( 19 )
nodes/fragment/6/position = Vector2( -2528, -352 )
nodes/fragment/6/size = Vector2( 782, 650 )
nodes/fragment/6/input_ports = "0,1,c;"
nodes/fragment/6/output_ports = "0,1,output;"
nodes/fragment/6/expression = "vec3 coord = c * 10.0;
vec2 i = floor(coord.xy);
vec2 f = fract(coord.xy);

float min_dist = 99999.0;
// going through the current tile and the tiles surrounding it
for(float x = -1.0; x <= 1.0; x++) {
	for(float y = -1.0; y <= 1.0; y++) {
		
		// generate a random point in each tile,
		// but also account for whether it's a farther, neighbouring tile
		vec2 randseed = i + vec2(x, y);
		vec2 rand = fract(sin( vec2( dot(randseed.xy,vec2(1237.41,311.7)), dot(randseed,vec2(269.5,183.3)) ) ) * 437.5453 * (0.001+sin(TIME*2.0)*0.0005));
		vec2 node = rand + vec2(x, y);
		
		// check for distance to the point in that tile
		// decide whether it's the minimum
		float dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);
		min_dist = min(min_dist, dist);
	}
}
output = vec3(min_dist)"
nodes/fragment/7/node = SubResource( 20 )
nodes/fragment/7/position = Vector2( -3020, -160 )
nodes/fragment/8/node = SubResource( 21 )
nodes/fragment/8/position = Vector2( -1808, -176 )
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( -2600, 480 )
nodes/fragment/9/size = Vector2( 975, 670 )
nodes/fragment/9/input_ports = "0,1,map;"
nodes/fragment/9/output_ports = "0,1,fragColor;"
nodes/fragment/9/expression = "// from https://www.shadertoy.com/view/MdlXz8
float time = TIME * .5+23.0;
// uv should be the 0-1 uv of texture...
vec2 uv = map.xy;
vec2 p = mod(uv*6.28318530718, 6.28318530718)-250.0;

vec2 i = vec2(p);
float c = 1.0;
float inten = .005;

for (int n = 0; n < 4; n++) 
{
	float t = time * (1.0 - (3.5 / float(n+1)));
	i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
	c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
}
c /= float(4);
c = 1.17-pow(c, 1.4);
vec3 colour = vec3(pow(abs(c), 8.0));
colour = clamp(colour + vec3(0.15, 0.15, 0), 0.0, 1.0);

fragColor = vec3(colour);
"
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1520, 144 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1616, -80 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1560, 500 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1720, 240 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1344, 80 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -1328, 144 )
nodes/fragment/21/node = SubResource( 7 )
nodes/fragment/21/position = Vector2( -1200, -440 )
nodes/fragment/22/node = SubResource( 8 )
nodes/fragment/22/position = Vector2( -980, -360 )
nodes/fragment/23/node = SubResource( 9 )
nodes/fragment/23/position = Vector2( -760, -400 )
nodes/fragment/24/node = SubResource( 10 )
nodes/fragment/24/position = Vector2( -1700, -640 )
nodes/fragment/26/node = SubResource( 11 )
nodes/fragment/26/position = Vector2( -1500, -600 )
nodes/fragment/35/node = SubResource( 13 )
nodes/fragment/35/position = Vector2( -2000, -680 )
nodes/fragment/36/node = SubResource( 14 )
nodes/fragment/36/position = Vector2( -2280, -700 )
nodes/fragment/37/node = SubResource( 15 )
nodes/fragment/37/position = Vector2( -2240, -580 )
nodes/fragment/39/node = SubResource( 16 )
nodes/fragment/39/position = Vector2( -1560, -720 )
nodes/fragment/40/node = SubResource( 18 )
nodes/fragment/40/position = Vector2( -1320, -720 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 1, 6, 0, 8, 0, 8, 0, 4, 0, 9, 0, 10, 0, 13, 0, 0, 3, 14, 0, 0, 2, 10, 0, 15, 0, 7, 0, 6, 0, 22, 0, 23, 0, 21, 0, 22, 0, 24, 0, 26, 0, 7, 0, 9, 0, 36, 0, 35, 0, 35, 0, 24, 0, 37, 0, 35, 1, 4, 0, 21, 0, 26, 0, 40, 0, 39, 0, 40, 1, 40, 0, 21, 1, 11, 0, 0, 0, 23, 0, 0, 17 )
nodes/light/0/position = Vector2( 1280, -20 )
nodes/light/15/node = SubResource( 23 )
nodes/light/15/position = Vector2( -260, -40 )
nodes/light/24/node = SubResource( 24 )
nodes/light/24/position = Vector2( 20, -40 )
nodes/light/28/node = SubResource( 25 )
nodes/light/28/position = Vector2( -140, -280 )
nodes/light/29/node = SubResource( 26 )
nodes/light/29/position = Vector2( -160, -220 )
nodes/light/30/node = SubResource( 27 )
nodes/light/30/position = Vector2( 260, -200 )
nodes/light/31/node = SubResource( 28 )
nodes/light/31/position = Vector2( 480, -180 )
nodes/light/32/node = SubResource( 29 )
nodes/light/32/position = Vector2( 256.25, -67.25 )
nodes/light/33/node = SubResource( 30 )
nodes/light/33/position = Vector2( 20, -120 )
nodes/light/35/node = SubResource( 31 )
nodes/light/35/position = Vector2( 860, -40 )
nodes/light/36/node = SubResource( 32 )
nodes/light/36/position = Vector2( 460, -20 )
nodes/light/37/node = SubResource( 33 )
nodes/light/37/position = Vector2( -60, 140 )
nodes/light/38/node = SubResource( 34 )
nodes/light/38/position = Vector2( -120, 200 )
nodes/light/39/node = SubResource( 35 )
nodes/light/39/position = Vector2( 140, 140 )
nodes/light/40/node = SubResource( 36 )
nodes/light/40/position = Vector2( 160, 340 )
nodes/light/41/node = SubResource( 37 )
nodes/light/41/position = Vector2( -60, 280 )
nodes/light/43/node = SubResource( 38 )
nodes/light/43/position = Vector2( -60, 360 )
nodes/light/44/node = SubResource( 39 )
nodes/light/44/position = Vector2( 640, 60 )
nodes/light/45/node = SubResource( 40 )
nodes/light/45/position = Vector2( 380, 220 )
nodes/light/46/node = SubResource( 41 )
nodes/light/46/position = Vector2( 360, 120 )
nodes/light/47/node = SubResource( 42 )
nodes/light/47/position = Vector2( 1060, -20 )
nodes/light/48/node = SubResource( 43 )
nodes/light/48/position = Vector2( -220, 40 )
nodes/light/connections = PoolIntArray( 28, 0, 30, 0, 30, 0, 31, 0, 33, 0, 32, 0, 32, 0, 31, 1, 24, 0, 32, 1, 37, 0, 39, 0, 41, 0, 40, 0, 39, 0, 45, 0, 40, 0, 45, 1, 45, 0, 44, 1, 46, 0, 44, 2, 43, 0, 40, 1, 35, 0, 47, 0, 47, 0, 0, 0, 48, 0, 24, 1, 15, 0, 24, 0, 44, 0, 35, 0, 36, 0, 35, 1, 31, 0, 44, 0, 29, 0, 30, 1, 38, 0, 39, 1 )
