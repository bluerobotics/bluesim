[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://scenery/terrain/textures/sand/Ground034_2K_Roughness.jpg" type="Texture" id=1]
[ext_resource path="res://scenery/terrain/textures/rock/Rock034_2K_Color.jpg" type="Texture" id=2]
[ext_resource path="res://scenery/terrain/textures/rock/Rock034_2K_Normal.jpg" type="Texture" id=3]
[ext_resource path="res://scenery/terrain/textures/sand/Ground034_2K_Normal.jpg" type="Texture" id=4]
[ext_resource path="res://scenery/terrain/textures/sand/Ground034_2K_Color.jpg" type="Texture" id=5]
[ext_resource path="res://scenery/terrain/textures/rock/Rock034_2K_Roughness.jpg" type="Texture" id=6]
[ext_resource path="res://scenery/terrain/textures/grass/Ground037_2K_Roughness.jpg" type="Texture" id=7]
[ext_resource path="res://scenery/terrain/textures/grass/Ground037_2K_Color.jpg" type="Texture" id=8]
[ext_resource path="res://scenery/terrain/textures/grass/Ground037_2K_Normal.jpg" type="Texture" id=9]
[ext_resource path="res://scenery/terrain/textures/caustics/caustic_texture.tres" type="Texture" id=10]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform sampler2D sand_bc : hint_albedo;
uniform sampler2D sand_n;
uniform sampler2D sand_r;
uniform sampler2D grass_bc : hint_albedo;
uniform sampler2D grass_n;
uniform sampler2D grass_r;
uniform sampler2D rock_bc : hint_albedo;
uniform sampler2D rock_n;
uniform sampler2D rock_r;
uniform float sand_normal_depth;
uniform float tiling_sand;
uniform float tiling_grass;
uniform float tiling_rock;



uniform sampler2D caustics;
uniform float light_mixer_angle;
uniform vec4 ambient_color : hint_color = vec4(0.0, 0.0, 0.3, 1.0);


float SchlickFresnel(float u) {
	float m = 1.0 - u;
	float m2 = m * m;
	return m2 * m2 * m; // pow(m,5)
}

// GlobalExpression:0
	//Diffuse

void vertex() {
// Output:0

}

void fragment() {

	float grass_or_sand = dot(COLOR.rgb, vec3(1.0, 0.0, 0.0));

// Output:0
	vec3 sand_bc_t = texture(sand_bc, UV*tiling_sand).rgb;
	vec3 sand_n_t = texture(sand_n, UV*tiling_sand).rgb;
	vec3 sand_r_t = texture(sand_r, UV*tiling_sand).rgb;
	
	vec3 grass_bc_t = texture(grass_bc, UV*tiling_grass).rgb;
	vec3 grass_n_t = texture(grass_n, UV*tiling_grass).rgb;
	vec3 grass_r_t = texture(grass_r, UV*tiling_grass).rgb;
	
	vec3 rock_bc_t = texture(rock_bc, UV*tiling_rock).rgb;
	vec3 rock_n_t = texture(rock_n, UV*tiling_rock).rgb;
	vec3 rock_r_t = texture(rock_r, UV*tiling_rock).rgb;
	
	vec3 level_terrain_bc = mix(grass_bc_t, sand_bc_t, grass_or_sand);
	vec3 level_terrain_n = mix(grass_n_t, sand_n_t, grass_or_sand);
	vec3 level_terrain_r = mix(grass_r_t, sand_r_t, grass_or_sand);
	float terrain_type = clamp(dot(NORMAL, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);
	ALBEDO = mix(rock_bc_t, level_terrain_bc, terrain_type);
	NORMALMAP = mix(rock_n_t, level_terrain_n, terrain_type);
	ROUGHNESS = mix(rock_r_t, level_terrain_r, terrain_type).r;
	NORMALMAP_DEPTH = sand_normal_depth;
	TRANSMISSION = texture(caustics, 70.0*UV.xy).xyz;

}

void light() {
// ScalarUniform:3
	float n_out3p0 = light_mixer_angle;

// Expression:2
	vec3 n_out2p0;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		//lambert
		vec3 L = LIGHT;
		vec3 N = NORMAL;
		vec3 V = VIEW;
		float NdotL = dot(N, L);
		float cNdotL = max(NdotL, 0.0); // clamped NdotL
		float NdotV = dot(N, V);
		float cNdotV = max(NdotV, 0.0);

		vec3 H = normalize(V + L);
		float cLdotH = max(dot(L, H), 0.0);		
		float diffuse_brdf_NL; // BRDF times N.L for calculating diffuse radiance
		vec3 regular_light;
		
		{
			float FD90_minus_1 = 2.0 * cLdotH * cLdotH * ROUGHNESS - 0.5;
			float FdV = 1.0 + FD90_minus_1 * SchlickFresnel(cNdotV);
			float FdL = 1.0 + FD90_minus_1 * SchlickFresnel(cNdotL);
			diffuse_brdf_NL = (1.0 / 3.14519) * FdV * FdL * cNdotL;
			/*
			float energyBias = mix(roughness, 0.0, 0.5);
			float energyFactor = mix(roughness, 1.0, 1.0 / 1.51);
			float fd90 = energyBias + 2.0 * VoH * VoH * roughness;
			float f0 = 1.0;
			float lightScatter = f0 + (fd90 - f0) * pow(1.0 - cNdotL, 5.0);
			float viewScatter = f0 + (fd90 - f0) * pow(1.0 - cNdotV, 5.0);

			diffuse_brdf_NL = lightScatter * viewScatter * energyFactor;
			*/
			regular_light = LIGHT_COLOR * ALBEDO * diffuse_brdf_NL * ATTENUATION;
		}

		// Input:33
			vec3 n_out33p0 = NORMAL;
		
		// VectorOp:24
			vec3 n_out24p0 = TRANSMISSION * LIGHT_COLOR;
		
		// DotProduct:32
			vec3 n_out32p0 = n_out24p0 * cNdotL * (1.0 / 3.14159);
		
		// VectorOp:31
			vec3 caustic = ambient_color.xyz + clamp(vec3(n_out32p0) * ATTENUATION, vec3(0.0), vec3(1.0));
		
		// Input:37
			vec3 n_out37p0 = ALBEDO;
		
		// Input:38
			vec3 n_out38p0 = ATTENUATION;
		
		// VectorOp:39
			vec3 n_out39p0 = n_out37p0 * n_out38p0;
		
		// Input:41
			vec3 n_out41p0 = NORMAL;
		
		// Input:43
			vec3 n_out43p0 = LIGHT_COLOR;
		
		// DotProduct:40
			float n_out40p0 = dot(n_out41p0, n_out43p0);
		
		// Expression:50
		
			vec3 world_light = (vec4(LIGHT, 1.0) * INV_CAMERA_MATRIX).xyz;
			//bool use_caustics = length(world_light.xz) <= n_out3p0;
			bool use_caustics = dot(normalize(world_light), vec3(0.,1.,0.)) >= n_out3p0;
		
		// VectorScalarMix:44
			vec3 n_out44p0 = mix(caustic, regular_light, use_caustics ? 0.0 : 1.0);
		
		// VectorOp:35
			vec3 n_out35p0 = n_out44p0;
		
		// VectorClamp:47
			vec3 n_in47p1 = vec3(0.00000, 0.00000, 0.00000);
			vec3 n_in47p2 = vec3(1.00000, 1.00000, 1.00000);
			vec3 n_out47p0 = clamp(n_out35p0, n_in47p1, n_in47p2);
		
		// Output:0
			n_out2p0 = n_out47p0;
		
	}

// Output:0
	DIFFUSE_LIGHT += n_out2p0;

}"

[resource]
shader = SubResource( 1 )
shader_param/sand_normal_depth = 0.926
shader_param/tiling_sand = 61.297
shader_param/tiling_grass = 30.487
shader_param/tiling_rock = 39.337
shader_param/light_mixer_angle = 0.995
shader_param/ambient_color = Color( 0, 0, 0.3, 1 )
shader_param/sand_bc = ExtResource( 5 )
shader_param/sand_n = ExtResource( 4 )
shader_param/sand_r = ExtResource( 1 )
shader_param/grass_bc = ExtResource( 8 )
shader_param/grass_n = ExtResource( 9 )
shader_param/grass_r = ExtResource( 7 )
shader_param/rock_bc = ExtResource( 2 )
shader_param/rock_n = ExtResource( 3 )
shader_param/rock_r = ExtResource( 6 )
shader_param/caustics = ExtResource( 10 )
