[gd_scene load_steps=17 format=2]

[ext_resource path="res://addons/visual_shader_node_library/examples/2D/icon.png" type="Texture" id=1]
[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/common/rotation_3d.gd" type="Script" id=2]
[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/common/rotation_2d.gd" type="Script" id=3]







[sub_resource type="VisualShaderNodeCustom" id=1]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 45.0

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 27

[sub_resource type="VisualShader" id=6]
code = "shader_type canvas_item;


// Rotation2D


void vertex() {
// Input:4
	float n_out4p0 = TIME;

// Input:3
	vec3 n_out3p0 = vec3(VERTEX, 0.0);

// Rotation2D:2
	vec3 n_out2p0;
	{
		rotation_2D(n_out4p0, vec3(0.0, 0.0, 0.0), n_out3p0, n_out2p0);
	}

// Output:0
	VERTEX = n_out2p0.xy;

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -505, -73 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 260, 140 )
nodes/vertex/2/node = SubResource( 1 )
nodes/vertex/2/position = Vector2( 20, 140 )
nodes/vertex/3/node = SubResource( 2 )
nodes/vertex/3/position = Vector2( -200, 240 )
nodes/vertex/4/node = SubResource( 3 )
nodes/vertex/4/position = Vector2( -200, 60 )
nodes/vertex/5/node = SubResource( 4 )
nodes/vertex/5/position = Vector2( -420, 160 )
nodes/vertex/6/node = SubResource( 5 )
nodes/vertex/6/position = Vector2( -220, 160 )
nodes/vertex/connections = PoolIntArray( 3, 0, 2, 2, 2, 0, 0, 0, 5, 0, 6, 0, 4, 0, 2, 0 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )

[sub_resource type="VisualShaderNodeCustom" id=8]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVec3Constant" id=9]
constant = Vector3( 1, 1, 1 )

[sub_resource type="VisualShaderNodeGlobalExpression" id=10]
size = Vector2( 464, 132 )
expression = "/*Rotation3D can also be used in Canvas Item*/

"

[sub_resource type="VisualShader" id=11]
code = "shader_type canvas_item;


// Rotation3D

mat4 rotation_matrix_3d(vec3 axis, float angle){
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat4(vec4(oc * axis.x * axis.x + c,			oc * axis.x * axis.y - axis.z * s,	oc * axis.z * axis.x + axis.y * s,	0.0),
                vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,			oc * axis.y * axis.z - axis.x * s,	0.0),
                vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, 	oc * axis.z * axis.z + c,			0.0),
                vec4(0.0,								0.0, 								0.0,								1.0));
}

void rotation_3d_normal(vec3 axis, float angle, in vec3 normal_in, out vec3 normal_out) {
	normal_out = (rotation_matrix_3d(axis, angle) * vec4(normal_in, 0.0)).xyz;
}

void rotation_3d(vec3 axis, float angle, vec3 pivot, in vec3 position_in, out vec3 position_out) {
	position_in.xyz -= pivot;
	vec4 position = vec4(position_in, 1.0);
	position_out = (rotation_matrix_3d(axis, angle) * position).xyz;
	position_out += pivot;
}
// GlobalExpression:0
	/*Rotation3D can also be used in Canvas Item*/
	
	

void vertex() {
// Vector:8
	vec3 n_out8p0 = vec3(1.000000, 1.000000, 1.000000);

// Input:4
	float n_out4p0 = TIME;

// Input:3
	vec3 n_out3p0 = vec3(VERTEX, 0.0);

// Rotation3D:7
	vec3 n_out7p0;
	vec3 n_out7p1;
	{
		rotation_3d(n_out8p0, n_out4p0, vec3(0.0, 0.0, 0.0), n_out3p0, n_out7p0);n_out7p1 = vec3(0.0, 0.0, 0.0);
	}

// Output:0
	VERTEX = n_out7p0.xy;

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -519, -103 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 260, 140 )
nodes/vertex/3/node = SubResource( 2 )
nodes/vertex/3/position = Vector2( -200, 240 )
nodes/vertex/4/node = SubResource( 3 )
nodes/vertex/4/position = Vector2( -200, 100 )
nodes/vertex/5/node = SubResource( 4 )
nodes/vertex/5/position = Vector2( -420, 160 )
nodes/vertex/6/node = SubResource( 5 )
nodes/vertex/6/position = Vector2( -220, 160 )
nodes/vertex/7/node = SubResource( 8 )
nodes/vertex/7/position = Vector2( 40, 140 )
nodes/vertex/8/node = SubResource( 9 )
nodes/vertex/8/position = Vector2( -340, 0 )
nodes/vertex/9/node = SubResource( 10 )
nodes/vertex/9/position = Vector2( 20, -40 )
nodes/vertex/9/size = Vector2( 464, 132 )
nodes/vertex/9/input_ports = ""
nodes/vertex/9/output_ports = ""
nodes/vertex/9/expression = "/*Rotation3D can also be used in Canvas Item*/

"
nodes/vertex/connections = PoolIntArray( 5, 0, 6, 0, 7, 0, 0, 0, 3, 0, 7, 3, 4, 0, 7, 1, 8, 0, 7, 0 )

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[sub_resource type="StreamTexture" id=13]
flags = 4
load_path = "res://.import/icon.png-09a8a4d28b57ca775351b66119cadc6b.stex"

[node name="Node2D" type="Node2D"]

[node name="Rotation" type="Sprite" parent="."]
material = SubResource( 7 )
position = Vector2( 57.2789, 57.2789 )
texture = ExtResource( 1 )

[node name="Label" type="Label" parent="Rotation"]
margin_left = -25.9443
margin_top = 38.4532
margin_right = 27.0557
margin_bottom = 52.4532
text = "Rotation"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Rotation 3D" type="Sprite" parent="."]
material = SubResource( 12 )
position = Vector2( 162.129, 55.3282 )
texture = SubResource( 13 )

[node name="Label" type="Label" parent="Rotation 3D"]
margin_left = -25.9443
margin_top = 38.4532
margin_right = 27.0557
margin_bottom = 52.4532
text = "Rotation 3D"
__meta__ = {
"_edit_use_anchors_": false
}
