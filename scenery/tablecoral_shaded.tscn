[gd_scene load_steps=19 format=2]

[ext_resource path="res://scenery/TableCoral_SSS_Roughness_AO.TGA" type="Texture" id=1]
[ext_resource path="res://scenery/TableCoral_Base_Color.TGA" type="Texture" id=2]
[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/3d/deep_parallax.gd" type="Script" id=4]
[ext_resource path="res://scenery/TableCorla_Height.TGA" type="Texture" id=5]
[ext_resource path="res://scenery/TableCoral_normal.TGA" type="Texture" id=6]
[ext_resource path="res://scenery/tablecoral.escn" type="PackedScene" id=7]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 6 )
texture_type = 2

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.79, 0.560505, 0.1343, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=7]
default_input_values = [ 2, 0.05, 3, 8, 4, 32, 9, Vector2( 1, 1 ) ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = -0.03

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 1.0

[sub_resource type="VisualShader" id=11]
code = "shader_type spatial;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3;
uniform sampler2D tex_frg_10 : hint_normal;


// DeepParallax
uniform sampler2D texture_parallax_default : hint_black;

void deep_parallax(in vec3 uv_in, in sampler2D depth_texture, in float depth_scale, in float min_layers, in float max_layers, in vec3 vertex, in vec3 normal, in vec3 tangent, in vec3 binormal, in vec3 depth_flip, out vec3 uv_out) {
	vec3 view_dir = normalize(normalize(-vertex) * mat3( tangent * depth_flip.x, -binormal * depth_flip.y, normal));
	float num_layers = mix( max_layers, min_layers, abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
	float layer_depth = 1.0 / num_layers;
	float current_layer_depth = 0.0;
	vec2 P = view_dir.xy * depth_scale;
	vec2 delta = P / num_layers;
	vec2 ofs = uv_in.xy;
	float depth = textureLod(depth_texture, ofs, 0.0).r;
	float current_depth = 0.0;
	while(current_depth < depth) {
		ofs -= delta;
		depth = textureLod(depth_texture, ofs, 0.0).r;
		current_depth += layer_depth;
	}
	vec2 prev_ofs = ofs + delta;
	float after_depth  = depth - current_depth;
	float before_depth = textureLod(depth_texture, prev_ofs, 0.0).r - current_depth + layer_depth;
	float weight = after_depth / (after_depth - before_depth);
	uv_out.xy = mix(ofs, prev_ofs, weight);
}

void vertex() {
// Output:0

}

void fragment() {
// Color:11
	vec3 n_out11p0 = vec3(0.790000, 0.560505, 0.134300);
	float n_out11p1 = 1.000000;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = -0.030000;

// DeepParallax:4
	float n_in4p3 = 8.00000;
	float n_in4p4 = 32.00000;
	vec3 n_out4p0;
	{
		deep_parallax(n_out5p0, texture_parallax_default, n_out8p0, n_in4p3, n_in4p4, VERTEX, NORMAL, TANGENT, BINORMAL, vec3(1.0, 1.0, 0.0), n_out4p0);
	}

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out4p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorOp:12
	vec3 n_out12p0 = n_out11p0 * n_out2p0;

// Scalar:13
	float n_out13p0 = 0.000000;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out4p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, n_out4p0.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// Scalar:9
	float n_out9p0 = 1.000000;

// Output:0
	ALBEDO = n_out12p0;
	METALLIC = n_out13p0;
	ROUGHNESS = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333));
	SPECULAR = n_out13p0;
	AO = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333));
	NORMALMAP = n_out10p0;
	NORMALMAP_DEPTH = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -276, 121 )
nodes/fragment/0/position = Vector2( 560, 160 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 160, 0 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( 160, 260 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -140, 140 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -360, 100 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -549, 236 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 160, 760 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 160, 500 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 200, -160 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 340, 0 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 340, 220 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 3, 5, 0, 4, 0, 8, 0, 4, 2, 9, 0, 0, 9, 11, 0, 12, 0, 2, 0, 12, 1, 12, 0, 0, 0, 4, 0, 10, 0, 4, 0, 3, 0, 4, 0, 2, 0, 13, 0, 0, 4, 13, 0, 0, 2, 3, 1, 0, 6, 10, 0, 0, 8 )

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/texture_parallax_default = ExtResource( 5 )

[node name="tablecoral" instance=ExtResource( 7 )]

[node name="TableCoralHighLPBake_80" parent="." index="0"]
material/0 = SubResource( 12 )
