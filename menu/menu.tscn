[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/squareFont.tres" type="DynamicFont" id=1]
[ext_resource path="res://menu/menuEnvironment.tres" type="Environment" id=2]
[ext_resource path="res://vehicles/bluerovheavy/bluerov cleaned decimated.gltf" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Control


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
var downloaded_files = []

func add_status(text: String):
	$statusLabel.text += text + \"\\n\"
	
func download_file(url : String, file_name : String):
	add_status(\"downloading \" + file_name)
	var http = HTTPRequest.new()
	add_child(http)
	http.set_download_file(file_name)
	http.request(url)
	http.connect(\"request_completed\", self, \"_on_download_finished\", [file_name])

func _all_files_downloaded():
	if OS.get_name() == \"Windows\":
		return len(downloaded_files) == 4
	elif OS.get_name() == \"X11\":
		return len(downloaded_files) == 1
		
func _on_download_finished(result, response_code, headers, body, file_name):
	add_status(\"done downloading \" + file_name)
	downloaded_files.append(file_name)
	if _all_files_downloaded():
		_start_sitl()


func _start_sitl():
	
	if OS.get_name() == \"Windows\":
		var binary = File.new()
		binary.open(\"user://ardusub.exe\", File.READ)
		print(binary.get_path_absolute())
		Globals.sitl_pid = OS.execute(binary.get_path_absolute(), [\"-S\",\"--model\",\"JSON\",\"--speedup\",\"1\",\"-I0\",\"--home\",\"33.810313,-118.39386700000001,0.0,270.0\"], false)
		print(Globals.sitl_pid)
		add_status(\"SITL is running\")
		$HBoxContainer/Buttons.visible = true
		
	elif OS.get_name() == \"X11\":
		var binary = File.new()
		binary.open(\"user://ardusub\", File.READ)
		print(binary.get_path_absolute())
		print(OS.execute(\"chmod\", [\"+x\", binary.get_path_absolute()], true))
		Globals.sitl_pid = OS.execute(binary.get_path_absolute(), [\"-S\",\"--model\",\"JSON\",\"--speedup\",\"1\",\"-I0\",\"--home\",\"33.810313,-118.39386700000001,0.0,270.0\"], false)
		add_status(\"SITL is running\")
		$HBoxContainer/Buttons.visible = true
	

func _notification(what):
	if (what == MainLoop.NOTIFICATION_WM_QUIT_REQUEST):
		OS.kill(Globals.sitl_pid)
		get_tree().quit()

# Called when the node enters the scene tree for the first time.
func _ready():
	get_tree().set_auto_accept_quit(false)
		
	$HBoxContainer/Buttons.visible = false
	if OS.get_name() == \"Windows\":
		if not File.new().file_exists(\"user://ardusub.exe\"):
			add_status(\"SITL binary not found, downloading...\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/ArduSub.elf\", \"user://ardusub.exe\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cyggcc_s-1.dll\", \"user://cyggcc_s-1.dll\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cygstdc++-6.dll\", \"user://cygstdc++-6.dll\")
			download_file(\"https://firmware.ardupilot.org/Tools/MissionPlanner/sitl/cygwin1.dll\", \"user://cygwin1.dll\")
		else:
			_start_sitl()
	elif OS.get_name() == \"X11\":
		if not File.new().file_exists(\"user://ardusub\"):
			download_file(\"https://firmware.ardupilot.org/Sub/latest/SITL_x86_64_linux_gnu/ardusub\", \"user://ardusub\")
		else:
			_start_sitl()

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _on_shipLevel_pressed():
	Globals.active_vehicle = \"bluerovheavy\"
	SceneLoader.goto_scene(\"res://levels/caveandmountain.tscn\")
	
func _on_CheckBox_toggled(button_pressed):
	Globals.wait_SITL = button_pressed
"

[sub_resource type="Animation" id=2]
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, -360, 0 ) ]
}

[sub_resource type="GDScript" id=3]
script/source = "extends CheckBox

func _ready():
	visible = not Globals.isHTML5
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportContainer" type="ViewportContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 300, 300 )
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1024, 600 )
handle_input_locally = false
render_target_update_mode = 3

[node name="Camera" type="Camera" parent="ViewportContainer/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.06004, 2.38419e-07, 2.77837 )
environment = ExtResource( 2 )

[node name="SpotLight" type="SpotLight" parent="ViewportContainer/Viewport"]
transform = Transform( 1, 0, 0, 0, 0.941659, 0.336569, 0, -0.336569, 0.941659, 0.295804, 0.721521, 2.64046 )
light_energy = 11.99

[node name="SpotLight2" type="SpotLight" parent="ViewportContainer/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.69466, 0.721521, 2.64046 )
light_energy = 11.99

[node name="Spatial" type="Spatial" parent="ViewportContainer/Viewport"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="ViewportContainer/Viewport/Spatial"]
autoplay = "rotatingbluerov"
anims/rotatingbluerov = SubResource( 2 )

[node name="bluerov cleaned decimated" parent="ViewportContainer/Viewport/Spatial" instance=ExtResource( 3 )]
transform = Transform( 1, 0, -6.55651e-07, 0, 1, 0, 6.55651e-07, 0, 1, 0.348981, 0, -0.233652 )

[node name="HBoxContainer" type="HBoxContainer" parent="."]
margin_left = 100.0
margin_top = 211.0
margin_right = 485.0
margin_bottom = 317.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Buttons" type="VBoxContainer" parent="HBoxContainer"]
margin_left = 5.0
margin_right = 380.0
margin_bottom = 106.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="shipLevel" type="Button" parent="HBoxContainer/Buttons"]
margin_right = 375.0
margin_bottom = 51.0
custom_fonts/font = ExtResource( 1 )
text = "BlueROV Heavy"

[node name="CheckBox" type="CheckBox" parent="HBoxContainer/Buttons"]
margin_top = 55.0
margin_right = 375.0
margin_bottom = 79.0
text = "Sync with SITL (only run frames when new input arrive)"
script = SubResource( 3 )

[node name="statusLabel" type="Label" parent="."]
margin_left = 105.757
margin_top = 288.928
margin_right = 477.757
margin_bottom = 371.928
text = "Starting...
"
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="pressed" from="HBoxContainer/Buttons/shipLevel" to="." method="_on_shipLevel_pressed"]
[connection signal="toggled" from="HBoxContainer/Buttons/CheckBox" to="." method="_on_CheckBox_toggled"]
